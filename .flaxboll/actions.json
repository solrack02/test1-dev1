{"1739548275638":{"actionType":"saveAll","createdAt":"1739548275638","actionID":"1739548275638","userID":"#TEMP","path":"system.capsules.a7571c8f-faca-402e-89ea-29b5a62a90ab.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport { Pressable, Text, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\n// Screen3 (newBase)\nexport const Screen3 = (props: Tprops) => {\n  const { pathScreen } = props.pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return <>{condShow && <Screen3Render pass={props.pass} />}</>;\n};\n\nfunction Screen3Render(props: Tprops) {\n  const { styles, screenElements, functions, args } = props.pass;\n  const [sttTypeFunc, setTypeFunc] = React.useState('');\n  const [sttPressFuncs, setPressFuncs] = React.useState([async () => {}]);\n\n  // ---------- call Functions (If Exists)\n  React.useEffect(() => {\n    const callFn = async () => {\n      const { trigger, arrFunctions } = await processFunctions(functions);\n      console.log({ trigger });\n      setTypeFunc(trigger);\n\n      if (trigger === 'on press') setPressFuncs(arrFunctions);\n      if (trigger === 'on init') {\n        console.log('ON INIT >>>>>');\n        for (const currFunc of arrFunctions) await currFunc();\n      }\n      console.log({ sttTypeFunc });\n    };\n\n    callFn().catch(err => console.log({ err }));\n  }, [sttTypeFunc]);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ---------- set Render\n  return sttTypeFunc === '' ? (\n    <></>\n  ) : sttTypeFunc === 'on press' ? (\n    <Pressable\n      style={[stl]}\n      onPress={async () => {\n        console.log('CRICOU', sttPressFuncs);\n        for (const currFunc of sttPressFuncs) await currFunc();\n      }}\n    >\n      {mapElements(screenElements, args)}\n    </Pressable>\n  ) : (\n    <View style={[stl]}>{mapElements(screenElements, args)}</View>\n  );\n}\n\nexport const processFunctions = async arr => {\n  for (const fn of arr) {\n    if (typeof fn === 'function') return await fn();\n  }\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport { Pressable, Text, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\n// Screen3 (newBase)\nexport const Screen3 = (props: Tprops) => {\n  const { pathScreen } = props.pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return <>{condShow && <Screen3Render pass={props.pass} />}</>;\n};\n\nfunction Screen3Render(props: Tprops) {\n  const { styles, screenElements, functions, args } = props.pass;\n  const [sttTypeFunc, setTypeFunc] = React.useState('');\n  const [sttPressFuncs, setPressFuncs] = React.useState([async () => {}]);\n\n  // ---------- call Functions (If Exists)\n  React.useEffect(() => {\n    const callFn = async () => {\n      const { trigger, arrFunctions } = await processFunctions(functions);\n      setTypeFunc(trigger);\n      setPressFuncs(arrFunctions);\n\n      if (trigger === 'on init') {\n        console.log('ON INIT >>>>>');\n        for (const currFunc of arrFunctions) await currFunc();\n      }\n      console.log({ sttTypeFunc });\n    };\n\n    callFn().catch(err => console.log({ err }));\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ---------- set Render\n  return sttTypeFunc === '' ? (\n    <></>\n  ) : sttTypeFunc === 'on press' ? (\n    <Pressable\n      style={[stl]}\n      onPress={async () => {\n        console.log('CRICOU', sttPressFuncs);\n        for (const currFunc of sttPressFuncs) await currFunc();\n      }}\n    >\n      {mapElements(screenElements, args)}\n    </Pressable>\n  ) : (\n    <View style={[stl]}>{mapElements(screenElements, args)}</View>\n  );\n}\n\nexport const processFunctions = async arr => {\n  for (const fn of arr) {\n    if (typeof fn === 'function') return await fn();\n  }\n};\n"}}