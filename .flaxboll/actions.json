{"1739552312738":{"actionType":"saveAll","createdAt":"1739552312738","actionID":"1739552312738","userID":"#TEMP","path":"system.capsules.a7571c8f-faca-402e-89ea-29b5a62a90ab.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\n// ---------- Types\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\n// Screen3 (newBase)\nexport const Screen3 = ({ pass }: Tprops) => {\n  const { pathScreen } = pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return condShow ? <Screen3Render pass={pass} /> : null;\n};\n\nfunction Screen3Render({ pass }: Tprops) {\n  const { styles, screenElements, functions, args } = pass;\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttPressFuncs, setPressFuncs] = useState<Array<() => Promise<void>>>(\n    [],\n  );\n\n  useEffect(() => {\n    const callFn = async () => {\n      const { trigger, arrFunctions } = await processFunctions(functions);\n      setTypeFunc(trigger);\n      setPressFuncs(arrFunctions);\n\n      console.log('ON INIT >>>>>');\n      // if (trigger === 'on init') {\n      //   for (const currFunc of arrFunctions) await currFunc();\n      // }\n    };\n\n    console.log('dentro EFFECT', sttTypeFunc, sttPressFuncs);\n    callFn();\n  }, []);\n\n  console.log('FORA EFFECT', sttTypeFunc, sttPressFuncs);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ---------- set Render\n  if (!sttTypeFunc) return null;\n\n  return sttTypeFunc === 'on press' ? (\n    <Pressable\n      style={stl}\n      onPress={async () => {\n        console.log('Clicou', sttPressFuncs);\n        for (const currFunc of sttPressFuncs) await currFunc();\n      }}\n    >\n      {mapElements(screenElements, args)}\n    </Pressable>\n  ) : (\n    <View style={stl}>{mapElements(screenElements, args)}</View>\n  );\n}\n\nexport const processFunctions = async (arr: any[]) => {\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || { trigger: '', arrFunctions: [] };\n    }\n  }\n  return { trigger: '', arrFunctions: [] };\n};","newValue":"// ---------- import Packs\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\n// ---------- Types\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\n// Screen3 (newBase)\nexport const Screen3 = ({ pass }: Tprops) => {\n  const { pathScreen } = pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return condShow ? <Screen3Render pass={pass} /> : null;\n};\n\nfunction Screen3Render({ pass }: Tprops) {\n  const { styles, screenElements, functions, args } = pass;\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttPressFuncs, setPressFuncs] = useState<Array<() => Promise<void>>>(\n    [],\n  );\n\n  useEffect(() => {\n    const callFn = async () => {\n      const { trigger, arrFunctions } = await processFunctions(functions);\n      setTypeFunc(trigger);\n      setPressFuncs(arrFunctions);\n\n      console.log('ON INIT >>>>>');\n      // if (trigger === 'on init') {\n      //   for (const currFunc of arrFunctions) await currFunc();\n      // }\n    };\n\n    console.log('dentro EFFECT', sttTypeFunc, sttPressFuncs);\n    callFn();\n  }, []);\n\n  console.log('FORA EFFECT', sttTypeFunc, sttPressFuncs);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ---------- set Render\n  if (!sttTypeFunc) return null;\n\n  return <></>;\n  // return sttTypeFunc === 'on press' ? (\n  //   <Pressable\n  //     style={stl}\n  //     onPress={async () => {\n  //       console.log('Clicou', sttPressFuncs);\n  //       for (const currFunc of sttPressFuncs) await currFunc();\n  //     }}\n  //   >\n  //     {mapElements(screenElements, args)}\n  //   </Pressable>\n  // ) : (\n  //   <View style={stl}>{mapElements(screenElements, args)}</View>\n  // );\n}\n\nexport const processFunctions = async (arr: any[]) => {\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || { trigger: '', arrFunctions: [] };\n    }\n  }\n  return { trigger: '', arrFunctions: [] };\n};"}}