{"1740666334223":{"actionType":"saveAll","createdAt":"1740666334223","actionID":"1740666334223","userID":"#TEMP","path":"system.capsules.09c4c85c-2dd8-439b-a0d8-80eeac65d933.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"","newValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, ScrollView, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue } from '../project';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    functions: any[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  if (!props) return <></>;\n  console.log('BOX', { props });\n\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  // ---------- set Props\n  const { elementsProperties, styles, functions } = props.pass;\n  const { childrenItems, args } = props.pass;\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n\n  for (const strObj of elementsProperties) {\n    if (!strObj) continue;\n    if (!props) continue;\n\n    console.log('BOX', { strObj });\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  console.log('BOX', { userElProps });\n\n  const allProps = {\n    style: stl,\n    ...userElProps,\n  };\n\n  console.log('BOX', { allProps });\n\n  // ---------- set Render\n  if (!sttTypeFunc)\n    return (\n      <View {...allProps}>\n        <ScrollView>{mapElements(childrenItems, args)}</ScrollView>\n      </View>\n    );\n\n  if (sttTypeFunc === 'on press') {\n    allProps.children = mapElements(childrenItems, args);\n    allProps.onPress = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n\n    return <Pressable {...allProps} />;\n  }\n\n  if (sttTypeFunc === 'on init')\n    return (\n      <View {...allProps}>\n        <ScrollView>{mapElements(childrenItems, args)}</ScrollView>\n      </View>\n    );\n};"}}