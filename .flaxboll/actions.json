{"1739546609461":{"actionType":"saveAll","createdAt":"1739546609461","actionID":"1739546609461","userID":"#TEMP","path":"system.capsules.06d60255-2477-4bd8-8910-d5bae8191384.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"type Tprops_funcGroup = {\n  args: any;\n  pass: { arrFunctions: any[]; trigger: string };\n};\nexport const funcGroup = async (props: Tprops_funcGroup) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  console.log({ props });\n  let { arrFunctions, trigger } = pass;\n  console.log({ trigger });\n\n  // ---------- set Execute Funcs\n  //   for (const currFunc of arrFunctions) await currFunc(args);\n\n  return { trigger, arrFunctions };\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\n// Screen3 (newBase)\nexport const Screen3 = (props: Tprops) => {\n  const { pathScreen } = props.pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return <>{condShow && <Screen3Render pass={props.pass} />}</>;\n};\n\nfunction Screen3Render(props: Tprops) {\n  const { styles, screenElements, functions, args } = props.pass;\n\n  const processFunctions = async arr => {\n    for (const fn of arr) {\n      if (typeof fn === 'function') {\n        const result = await fn(); // Executa a função assíncrona\n        console.log('RESULT GROUP', { result });\n\n        if (result?.pass?.trigger) {\n          console.log('Trigger:', result.pass.trigger);\n        }\n      }\n    }\n  };\n\n  // ---------- call Functions (If Exists)\n  React.useEffect(() => {\n    const callFn = async () => {\n      const xxx = await processFunctions(functions);\n      console.log({ xxx });\n\n      console.log({ functions });\n      for (const currFunc of functions) await currFunc();\n    };\n    callFn().catch(err => console.log({ err }));\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  console.log('AQUI 2', { styles });\n  const stl = getStlValues(styles);\n  console.log('AQUI 3', { stl });\n\n  // ---------- set Render\n  return <View style={[stl]}>{mapElements(screenElements, args)}</View>;\n}\n"}}