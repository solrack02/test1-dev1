{"1739555848132":{"actionType":"saveAll","createdAt":"1739555848132","actionID":"1739555848132","userID":"#TEMP","path":"system.capsules.09c4c85c-2dd8-439b-a0d8-80eeac65d933.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport { View } from 'react-native';\n\n// ---------- import Local Tools\nimport { argSel, getStlValues, mapElements, pathSel } from '../project';\nimport { useData } from '../../..';\nimport { backgroundColor, width } from '../stls';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    variablePath: string[];\n    expectedVal: string[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  console.log('BOX', { props });\n  // ---------- set Props\n  const { elementsProperties, variablePath, styles } = props.pass;\n  const { expectedVal, childrenItems, args } = props.pass;\n\n  // ---------- set VarPath and expectedVal as a single string\n  let varPath = variablePath.join();\n  const newVal = expectedVal.join();\n\n  const condHash = varPath.startsWith('#');\n  let compareVal = useData(ct => pathSel(ct, varPath));\n  if (condHash) compareVal = argSel(args, varPath);\n\n  // ---------- set Conditional Element Render\n  let condRender = true;\n  if (variablePath.length > 0) condRender = compareVal === newVal;\n\n  // ---------- set Variables Styles (If Exists)\n  //   const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n\n  for (const object of elementsProperties) {\n    for (const keyProp in object) {\n      const valueProp = object[keyProp];\n      userElProps[keyProp] = valueProp;\n    }\n  }\n\n  const allProps = {\n    // style: [stl],\n    style: styles,\n    children: mapElements(childrenItems, args),\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  return <>{condRender && <View {...allProps} />}</>;\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport { View } from 'react-native';\n\n// ---------- import Local Tools\nimport { argSel, getStlValues, mapElements, pathSel } from '../project';\nimport { useData } from '../../..';\nimport { backgroundColor, width } from '../stls';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    variablePath: string[];\n    expectedVal: string[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  console.log('BOX', { props });\n  // ---------- set Props\n  const { elementsProperties, variablePath, styles } = props.pass;\n  const { expectedVal, childrenItems, args } = props.pass;\n\n  // ---------- set VarPath and expectedVal as a single string\n  let varPath = variablePath.join();\n  const newVal = expectedVal.join();\n\n  const condHash = varPath.startsWith('#');\n  let compareVal = useData(ct => pathSel(ct, varPath));\n  if (condHash) compareVal = argSel(args, varPath);\n\n  // ---------- set Conditional Element Render\n  let condRender = true;\n  if (variablePath.length > 0) condRender = compareVal === newVal;\n\n  // ---------- set Variables Styles (If Exists)\n  //   const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n\n  for (const object of elementsProperties) {\n    for (const keyProp in object) {\n      const valueProp = object[keyProp];\n      userElProps[keyProp] = valueProp;\n    }\n  }\n\n  const allProps = {\n    // style: [stl],\n    style: styles,\n    children: mapElements(childrenItems, args),\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  return <>{condRender && <View {...allProps} />}</>;\n};"}}