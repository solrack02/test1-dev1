{"1739917099220":{"actionType":"saveAll","createdAt":"1739917099220","actionID":"1739917099220","userID":"#TEMP","path":"system.capsules.a7571c8f-faca-402e-89ea-29b5a62a90ab.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\n// ---------- Types\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// Screen3 (newBase)\nexport const Screen3 = ({ pass }: Tprops) => {\n  const { pathScreen } = pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return condShow ? <Screen3Render pass={pass} /> : null;\n};\n\nfunction Screen3Render({ pass }: Tprops) {\n  const { styles, screenElements, functions, args } = pass;\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  console.log('SCREEN', { styles });\n  const stl = getStlValues(styles);\n  console.log('SCREEN', { stl });\n\n  // ---------- set Render\n  if (!sttTypeFunc) {\n    return <View style={stl}>{mapElements(screenElements, args)}</View>;\n  }\n\n  if (sttTypeFunc === 'on press') {\n    const onPressFunc = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n    return (\n      <Pressable style={stl} onPress={onPressFunc}>\n        {mapElements(screenElements, args)}\n      </Pressable>\n    );\n  }\n\n  if (sttTypeFunc === 'on init') {\n    return <View style={stl}>{mapElements(screenElements, args)}</View>;\n  }\n}\n","newValue":"// ---------- import Packs\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements } from '../project';\nimport { useRoutes } from '../../..';\n\n// ---------- Types\ntype Tprops = {\n  pass: {\n    pathScreen: string;\n    styles: any;\n    screenElements: any;\n    functions: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// Screen3 (newBase)\nexport const Screen3 = ({ pass }: Tprops) => {\n  const { pathScreen } = pass;\n  const currRoute = useRoutes(ct => ct.currRoute);\n  const condShow = pathScreen === currRoute;\n\n  return condShow ? <Screen3Render pass={pass} /> : null;\n};\n\nfunction Screen3Render({ pass }: Tprops) {\n  const { styles, screenElements, functions, args } = pass;\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  console.log('SCREEN', { styles });\n  const stl = getStlValues(styles);\n  console.log('SCREEN', { stl });\n\n  // ---------- set Render\n  if (!sttTypeFunc) {\n    return <View style={stl}>{mapElements(screenElements, args)}</View>;\n  }\n\n  if (sttTypeFunc === 'on press') {\n    const onPressFunc = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n    return (\n      <Pressable style={stl} onPress={onPressFunc}>\n        {mapElements(screenElements, args)}\n      </Pressable>\n    );\n  }\n\n  if (sttTypeFunc === 'on init') {\n    return <View style={stl}>{mapElements(screenElements, args)}</View>;\n  }\n}"}}